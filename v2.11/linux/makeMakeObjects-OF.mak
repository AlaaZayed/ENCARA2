cpp-compiler := g++

# Data project
projectName := $(notdir $(CURDIR))
projectDir := $(CURDIR)
projectIncludeFlag := -I$(projectDir) -I$(projectDir)/include -I$(projectDir)/include/others 
projectObjDir := $(projectDir)/obj
#projectFlags := -DENCARA2INLINUX
projectFlags := -DENCARA2INLINUX -DUSES_OF    #Para OpenFrameworks

# Gtk
#gtkFlags := -DG_DISABLE_DEPRECATED \
#	-DGDK_DISABLE_DEPRECATED \
#	-DGDK_PIXBUF_DISABLE_DEPRECATED \
#	-DGTK_DISABLE_DEPRECATED \
#	`pkg-config gtk+-2.0 --cflags gthread-2.0`

# OpenCV
openCVIncludeFlag := -I$(OPENCV_PATH)
#openCVFlags := `opencv-config --cflags`
openCVFlags := `pkg-config opencv --cflags`

# IPL
iplIncludeFlag := -I$(IPL_PATH)
#iplFlags := 

includeFlags := $(projectIncludeFlag) $(openCVIncludeFlag) $(iplIncludeFlag)

#flags = $(extraFlags) -fexceptions -DREENTRANT -D_THREAD_SAFE -pthread  $(projectFlags)
flags = $(extraFlags) -fexceptions $(projectFlags) $(openCVFlags) $(iplFlags)# $(gtkFlags)

# Library objects and prerequisites: begin

libDirs := src

ifeq ( .,$(findstring ., $(projectDirs)) ) # Library Directories: begin

absLibDirs := $(addprefix $(projectDir)/, $(libDirs))

else

theDir := $(dir $(projectDir))
theDir := $(patsubst %/,%,$(theDir))
absLibDirs := $(addprefix $(projectName)/,$(libDirs))
absLibDirs := $(patsubst %/.,%,$(absLibDirs))
absLibDirs := $(addprefix $(theDir)/, $(absLibDirs))

endif # Library Directories: end

libCppFiles := $(foreach aDir,$(absLibDirs),$(shell ls $(aDir)/*.cpp))
libPrerequisites := $(foreach cppFile, $(libCppFiles), $(projectObjDir)/$(notdir $(cppFile:.cpp=.o.lib.pre)))
libObjectRules := $(foreach cppFile, $(libCppFiles), $(projectObjDir)/$(notdir $(cppFile:.cpp=.mak)))
libObjects := $(foreach cppFile, $(libCppFiles), $(projectObjDir)/$(notdir $(cppFile:.cpp=.o)))

makeLibPrerequisites := $(foreach cppFile, \
                               $(libCppFiles), \
			       $(shell $(cpp-compiler) -MM $(flags) $(includeFlags) -c $(cppFile) > $(projectObjDir)/$(notdir $(cppFile:.cpp=.o.lib.pre))))

# Library objects and prerequisites: begin


# Examples objects and prerequisites: begin

exampleDirs := examples

ifeq ( .,$(findstring ., $(exampleDirs)) ) # Examples Directories: begin

absExampleDirs := $(addprefix $(projectDir)/, $(exampleDirs))

else

theDir := $(dir $(projectDir))
theDir := $(patsubst %/,%,$(theDir))
absExampleDirs := $(addprefix $(projectName)/,$(exampleDirs))
absExampleDirs := $(patsubst %/.,%,$(absExampleDirs))
absExampleDirs := $(addprefix $(theDir)/, $(absExampleDirs))

endif # Examples Directories: end

exampleCppFiles := $(foreach aDir,$(absExampleDirs),$(shell ls $(aDir)/*.cpp))
examplePrerequisites := $(foreach cppFile, $(exampleCppFiles), $(projectObjDir)/$(notdir $(cppFile:.cpp=.o.pre)))
exampleObjectRules := $(foreach cppFile, $(exampleCppFiles), $(projectObjDir)/$(notdir $(cppFile:.cpp=.mak)))
exampleObjects := $(foreach cppFile, $(exampleCppFiles), $(projectObjDir)/$(notdir $(cppFile:.cpp=.o)))

makeExamplePrerequisites := $(foreach cppFile, \
                               $(exampleCppFiles), \
			       $(shell $(cpp-compiler) -MM $(flags) $(includeFlags) -c $(cppFile) > $(projectObjDir)/$(notdir $(cppFile:.cpp=.o.pre))))


# Examples objects and prerequisites: end

makeObjects := $(projectObjDir)/makeObjects.mak

all: $(makeObjects)

$(makeObjects): $(libObjectRules) $(exampleObjectRules)
#$(makeObjects): $(libObjectRules)	
	echo "# Makefile generated by makeMakeObjects.mak" > $@; \
	echo >> $@; \
	cat $(libObjectRules) >> $@; \
	echo >> $@; \
	cat $(exampleObjectRules) >> $@; \
	echo >> $@;

$(libObjectRules): %.mak: %.o.lib.pre
	echo -n $(projectObjDir)/ > $@; \
	cat $< >> $@; \
	echo "	"$(cpp-compiler) -o $(patsubst %.mak,%.o,$@) $(flags) -fPIC $(includeFlags) -c $(filter %.cpp,$(shell cat $<)) >> $@; \
	echo >> $@
	
$(exampleObjectRules): %.mak: %.o.pre
	echo -n $(projectObjDir)/ > $@; \
	cat $< >> $@; \
	echo "	"$(cpp-compiler) -o $(patsubst %.mak,%.o,$@) $(flags) $(includeFlags) -c $(filter %.cpp,$(shell cat $<)) >> $@; \
	echo >> $@

$(libPrerequisites): $(libCppFiles)
	$(makeLibPrerequisites)

$(examplePrerequisites): $(exampleCppFiles)
	$(makeExamplePrerequisites)

.PHONY: clean

clean:
	rm $(libPrerequisites) $(examplePrerequisites) $(libObjectRules) $(exampleObjectRules) $(makeObjects)
#	rm $(libPrerequisites) $(libObjectRules) $(makeObjects)


